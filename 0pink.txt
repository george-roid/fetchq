window.stopZeroCounter = false; // Set to true to stop at any time

async function collectZeroGirlLinksLive(maxLinks = 1000, scrollDelay = 1500) {
    let zeroGirlLinks = new Set();
    let lastHeight = 0;
    let attemptsWithoutNew = 0;

    console.log("Started collecting. Set window.stopZeroCounter = true in the console to stop at any time.");

    while (zeroGirlLinks.size < maxLinks && attemptsWithoutNew < 10 && !window.stopZeroCounter) {
        let foundThisRound = 0;

        // Find all .ibar-opcounters on the page
        let spans = Array.from(document.querySelectorAll('span.ibar-opcounters'));
        spans.forEach(span => {
            let girlA = span.querySelector('a[href*="#girls"]');
            if (girlA) {
                let counter = girlA.querySelector('.girlcounter');
                if (counter && counter.textContent.trim() === "0") {
                    let link = girlA.href.replace(/#girls$/, '');
                    if (!zeroGirlLinks.has(link)) {
                        zeroGirlLinks.add(link);
                        foundThisRound++;
                    }
                }
            }
        });

        if (foundThisRound > 0) {
            console.log(`[${zeroGirlLinks.size}] links collected so far... (+${foundThisRound} new)`);
        } else {
            console.log(`[${zeroGirlLinks.size}] links collected so far...`);
        }

        // Scroll and wait
        window.scrollTo(0, document.body.scrollHeight);
        await new Promise(res => setTimeout(res, scrollDelay));

        let newHeight = document.body.scrollHeight;
        if (newHeight === lastHeight) {
            attemptsWithoutNew++;
        } else {
            attemptsWithoutNew = 0;
            lastHeight = newHeight;
        }
    }

    let result = Array.from(zeroGirlLinks).slice(0, maxLinks);
    window.latestZeroGirlLinks = result;
    console.log(`Done! Collected ${result.length} links. To copy: copy(window.latestZeroGirlLinks.join("\\n"))`);
    return result;
}

// Usage:
collectZeroGirlLinksLive(1000, 1500);
